% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilitities_mathematical.R
\name{prepare_RNG_streams}
\alias{prepare_RNG_streams}
\title{Implementation of Pierre L'Ecuyer's RngStreams for N tasks}
\usage{
prepare_RNG_streams(N, iseed = NULL)
}
\arguments{
\item{N}{An integer. The number of streams to generate.}

\item{iseed}{An integer or \code{NULL}. The seed used by set.seed before generating the streams.}
}
\value{
A vector of length N containing the seed for each stream.
}
\description{
The function \code{\link{parallel::clusterSetRNGStream}} creates a stream for each slave/core, and thus replicability can only realized if each task is assigned to a the same slave at each repeated call. This is usually not guaranteed with load-balancing parallel computations or when a long computation is being re-started continuing on previously produced results.
This implementation generates a stream for each unique tasks and thus avoids those two problems.
}
\details{
The current RNG kind, if required, must be captures before calling this function because the function sets it to "L'Ecuyer-CMRG" (see examples).
}
\examples{
RNGkind_old <- RNGkind()
seeds <- prepare_RNG_streams(10, iseed = 123)
# do work with random numbers
RNGkind(kind = RNGkind_old[1], normal.kind = RNGkind_old[2])
}

